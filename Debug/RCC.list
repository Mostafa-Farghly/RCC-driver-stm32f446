
RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08000fd4  08000fd4  00010fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011f8  080011f8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080011f8  080011f8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011f8  080011f8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011f8  080011f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011fc  080011fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001264  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001264  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002801  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006b2  00000000  00000000  0002288f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00022f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00023108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b8f  00000000  00000000  00023280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013f2  00000000  00000000  00025e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009da9  00000000  00000000  00027201  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030faa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bec  00000000  00000000  00031028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000fbc 	.word	0x08000fbc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08000fbc 	.word	0x08000fbc

08000204 <main>:
void TEST_RCC_HSEBypass(void);
void TEST_RCC_setCLockStatus(void);


int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	TEST_RCC_AHB1_enableCLock();
 8000208:	f000 f806 	bl	8000218 <TEST_RCC_AHB1_enableCLock>
	TEST_RCC_HSEBypass();
 800020c:	f000 f838 	bl	8000280 <TEST_RCC_HSEBypass>
	TEST_RCC_setCLockStatus();
 8000210:	f000 f86a 	bl	80002e8 <TEST_RCC_setCLockStatus>
    /* Loop forever */
	for(;;);
 8000214:	e7fe      	b.n	8000214 <main+0x10>
	...

08000218 <TEST_RCC_AHB1_enableCLock>:
/*******************************************************
 * 					RCC driver tests				   *
 *******************************************************/

void TEST_RCC_AHB1_enableCLock(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	volatile uint8 gpioAEnableResult = 8;
 800021e:	2308      	movs	r3, #8
 8000220:	71fb      	strb	r3, [r7, #7]
	gpioAEnableResult = RCC_AHB1_enableClock(GPIOA);
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f896 	bl	8000354 <RCC_AHB1_enableClock>
 8000228:	4603      	mov	r3, r0
 800022a:	71fb      	strb	r3, [r7, #7]
	if(gpioAEnableResult == TRUE)
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	b2db      	uxtb	r3, r3
 8000230:	2b01      	cmp	r3, #1
 8000232:	d103      	bne.n	800023c <TEST_RCC_AHB1_enableCLock+0x24>
	{
		printf("RCC_AHB1_enableClock test passed\n");
 8000234:	480e      	ldr	r0, [pc, #56]	; (8000270 <TEST_RCC_AHB1_enableCLock+0x58>)
 8000236:	f000 fab5 	bl	80007a4 <puts>
 800023a:	e002      	b.n	8000242 <TEST_RCC_AHB1_enableCLock+0x2a>
	}
	else
	{
		printf("RCC_AHB1_enableClock test failed\n");
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <TEST_RCC_AHB1_enableCLock+0x5c>)
 800023e:	f000 fab1 	bl	80007a4 <puts>
	}

	gpioAEnableResult = 8;
 8000242:	2308      	movs	r3, #8
 8000244:	71fb      	strb	r3, [r7, #7]
	gpioAEnableResult = RCC_AHB1_disableClock(GPIOA);
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f8a4 	bl	8000394 <RCC_AHB1_disableClock>
 800024c:	4603      	mov	r3, r0
 800024e:	71fb      	strb	r3, [r7, #7]
	if(gpioAEnableResult == TRUE)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	2b01      	cmp	r3, #1
 8000256:	d103      	bne.n	8000260 <TEST_RCC_AHB1_enableCLock+0x48>
	{
		printf("RCC_AHB1_disableClock test passed\n");
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <TEST_RCC_AHB1_enableCLock+0x60>)
 800025a:	f000 faa3 	bl	80007a4 <puts>
	}
	else
	{
		printf("RCC_AHB1_disableClock test failed\n");
	}
}
 800025e:	e002      	b.n	8000266 <TEST_RCC_AHB1_enableCLock+0x4e>
		printf("RCC_AHB1_disableClock test failed\n");
 8000260:	4806      	ldr	r0, [pc, #24]	; (800027c <TEST_RCC_AHB1_enableCLock+0x64>)
 8000262:	f000 fa9f 	bl	80007a4 <puts>
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	08000fd4 	.word	0x08000fd4
 8000274:	08000ff8 	.word	0x08000ff8
 8000278:	0800101c 	.word	0x0800101c
 800027c:	08001040 	.word	0x08001040

08000280 <TEST_RCC_HSEBypass>:


void TEST_RCC_HSEBypass(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	volatile bool bypassResult = 8;
 8000286:	2308      	movs	r3, #8
 8000288:	71fb      	strb	r3, [r7, #7]
	bypassResult = RCC_HSEBypass(TRUE);
 800028a:	2001      	movs	r0, #1
 800028c:	f000 f8a6 	bl	80003dc <RCC_HSEBypass>
 8000290:	4603      	mov	r3, r0
 8000292:	71fb      	strb	r3, [r7, #7]
	if(bypassResult == TRUE)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b01      	cmp	r3, #1
 800029a:	d103      	bne.n	80002a4 <TEST_RCC_HSEBypass+0x24>
	{
		printf("RCC_HSEBypass(TRUE) test passed\n");
 800029c:	480e      	ldr	r0, [pc, #56]	; (80002d8 <TEST_RCC_HSEBypass+0x58>)
 800029e:	f000 fa81 	bl	80007a4 <puts>
 80002a2:	e002      	b.n	80002aa <TEST_RCC_HSEBypass+0x2a>
	}
	else
	{
		printf("RCC_HSEBypass(TRUE) test failed\n");
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <TEST_RCC_HSEBypass+0x5c>)
 80002a6:	f000 fa7d 	bl	80007a4 <puts>
	}

	bypassResult = 8;
 80002aa:	2308      	movs	r3, #8
 80002ac:	71fb      	strb	r3, [r7, #7]
	bypassResult = RCC_HSEBypass(FALSE);
 80002ae:	2000      	movs	r0, #0
 80002b0:	f000 f894 	bl	80003dc <RCC_HSEBypass>
 80002b4:	4603      	mov	r3, r0
 80002b6:	71fb      	strb	r3, [r7, #7]
	if(bypassResult == TRUE)
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d103      	bne.n	80002c8 <TEST_RCC_HSEBypass+0x48>
	{
		printf("RCC_HSEBypass(FALSE) test passed\n");
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <TEST_RCC_HSEBypass+0x60>)
 80002c2:	f000 fa6f 	bl	80007a4 <puts>
	}
	else
	{
		printf("RCC_HSEBypass(FALSE) test failed\n");
	}
}
 80002c6:	e002      	b.n	80002ce <TEST_RCC_HSEBypass+0x4e>
		printf("RCC_HSEBypass(FALSE) test failed\n");
 80002c8:	4806      	ldr	r0, [pc, #24]	; (80002e4 <TEST_RCC_HSEBypass+0x64>)
 80002ca:	f000 fa6b 	bl	80007a4 <puts>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	08001064 	.word	0x08001064
 80002dc:	08001084 	.word	0x08001084
 80002e0:	080010a4 	.word	0x080010a4
 80002e4:	080010c8 	.word	0x080010c8

080002e8 <TEST_RCC_setCLockStatus>:


void TEST_RCC_setCLockStatus(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
	volatile bool clkStatusResult = 8;
 80002ee:	2308      	movs	r3, #8
 80002f0:	71fb      	strb	r3, [r7, #7]
	clkStatusResult = RCC_setCLockStatus(HSE, ON);
 80002f2:	2101      	movs	r1, #1
 80002f4:	2010      	movs	r0, #16
 80002f6:	f000 f89f 	bl	8000438 <RCC_setCLockStatus>
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	if(clkStatusResult == TRUE)
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b01      	cmp	r3, #1
 8000304:	d103      	bne.n	800030e <TEST_RCC_setCLockStatus+0x26>
	{
		printf("RCC_setCLockStatus(HSE, ON) test passed\n");
 8000306:	480f      	ldr	r0, [pc, #60]	; (8000344 <TEST_RCC_setCLockStatus+0x5c>)
 8000308:	f000 fa4c 	bl	80007a4 <puts>
 800030c:	e002      	b.n	8000314 <TEST_RCC_setCLockStatus+0x2c>
	}
	else
	{
		printf("RCC_setCLockStatus(HSE, ON) test failed\n");
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <TEST_RCC_setCLockStatus+0x60>)
 8000310:	f000 fa48 	bl	80007a4 <puts>
	}

	clkStatusResult = 8;
 8000314:	2308      	movs	r3, #8
 8000316:	71fb      	strb	r3, [r7, #7]
	clkStatusResult = RCC_setCLockStatus(HSE, OFF);
 8000318:	2100      	movs	r1, #0
 800031a:	2010      	movs	r0, #16
 800031c:	f000 f88c 	bl	8000438 <RCC_setCLockStatus>
 8000320:	4603      	mov	r3, r0
 8000322:	71fb      	strb	r3, [r7, #7]
	if(clkStatusResult == TRUE)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b01      	cmp	r3, #1
 800032a:	d103      	bne.n	8000334 <TEST_RCC_setCLockStatus+0x4c>
	{
		printf("RCC_setCLockStatus(HSE, OFF) test passed\n");
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <TEST_RCC_setCLockStatus+0x64>)
 800032e:	f000 fa39 	bl	80007a4 <puts>
	}
	else
	{
		printf("RCC_setCLockStatus(HSE, OFF) test failed\n");
	}
}
 8000332:	e002      	b.n	800033a <TEST_RCC_setCLockStatus+0x52>
		printf("RCC_setCLockStatus(HSE, OFF) test failed\n");
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <TEST_RCC_setCLockStatus+0x68>)
 8000336:	f000 fa35 	bl	80007a4 <puts>
}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	080010ec 	.word	0x080010ec
 8000348:	08001114 	.word	0x08001114
 800034c:	0800113c 	.word	0x0800113c
 8000350:	08001168 	.word	0x08001168

08000354 <RCC_AHB1_enableClock>:
 ********************************************/

/* Peripherals enablers */

bool RCC_AHB1_enableClock(const AHB1_Peripheral a_peripheral)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
	/* Set the bit in the AHB1ENR that corresponds to the desired peripheral */
	SET_BIT(RCC_AHB1ENR, a_peripheral);
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <RCC_AHB1_enableClock+0x3c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	79fa      	ldrb	r2, [r7, #7]
 8000364:	2101      	movs	r1, #1
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a08      	ldr	r2, [pc, #32]	; (8000390 <RCC_AHB1_enableClock+0x3c>)
 800036e:	430b      	orrs	r3, r1
 8000370:	6013      	str	r3, [r2, #0]

	/* Return the value of the bit (Should be 1)*/
	return RCC_AHB1ENR & (1 << a_peripheral);
 8000372:	4b07      	ldr	r3, [pc, #28]	; (8000390 <RCC_AHB1_enableClock+0x3c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	b2da      	uxtb	r2, r3
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2101      	movs	r1, #1
 800037c:	fa01 f303 	lsl.w	r3, r1, r3
 8000380:	b2db      	uxtb	r3, r3
 8000382:	4013      	ands	r3, r2
 8000384:	b2db      	uxtb	r3, r3
}
 8000386:	4618      	mov	r0, r3
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40023830 	.word	0x40023830

08000394 <RCC_AHB1_disableClock>:
 */

/* Peripherals disablers */

bool RCC_AHB1_disableClock(const AHB1_Peripheral a_peripheral)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	/* Set the bit in the AHB1ENR that corresponds to the desired peripheral */
	CLEAR_BIT(RCC_AHB1ENR, a_peripheral);
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <RCC_AHB1_disableClock+0x44>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	79fa      	ldrb	r2, [r7, #7]
 80003a4:	2101      	movs	r1, #1
 80003a6:	fa01 f202 	lsl.w	r2, r1, r2
 80003aa:	43d2      	mvns	r2, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <RCC_AHB1_disableClock+0x44>)
 80003b0:	400b      	ands	r3, r1
 80003b2:	6013      	str	r3, [r2, #0]

	/* Return the inverse of the value of the bit (Should be 1)*/
	return !(RCC_AHB1ENR & (1 << a_peripheral));
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <RCC_AHB1_disableClock+0x44>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	79fa      	ldrb	r2, [r7, #7]
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	4013      	ands	r3, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	bf0c      	ite	eq
 80003c6:	2301      	moveq	r3, #1
 80003c8:	2300      	movne	r3, #0
 80003ca:	b2db      	uxtb	r3, r3
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023830 	.word	0x40023830

080003dc <RCC_HSEBypass>:
 */

/* Clocks controls and configurations */

bool RCC_HSEBypass(const bool a_bypass)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	/* check to bypass oscillator or not */
	if(a_bypass)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d00d      	beq.n	8000408 <RCC_HSEBypass+0x2c>
	{
		/* Set HSEBYP bit in the RCC_CR to bypass oscillator*/
		RCC_CR |= RCC_CR_HSEBYP;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <RCC_HSEBypass+0x58>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <RCC_HSEBypass+0x58>)
 80003f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f6:	6013      	str	r3, [r2, #0]

		/* Return the value of HSEBYP bit */
		if(RCC_CR & RCC_CR_HSEBYP)
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <RCC_HSEBypass+0x58>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000400:	2b00      	cmp	r3, #0
 8000402:	d011      	beq.n	8000428 <RCC_HSEBypass+0x4c>
		{
			return TRUE;
 8000404:	2301      	movs	r3, #1
 8000406:	e00f      	b.n	8000428 <RCC_HSEBypass+0x4c>
		}
	}
	else
	{
		/* Clear HSEBYP bit in the RCC_CR */
		RCC_CR &= ~(RCC_CR_HSEBYP);
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <RCC_HSEBypass+0x58>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a09      	ldr	r2, [pc, #36]	; (8000434 <RCC_HSEBypass+0x58>)
 800040e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000412:	6013      	str	r3, [r2, #0]

		/* Return the inverted HSEBYP value */
		return !(RCC_CR & RCC_CR_HSEBYP);
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <RCC_HSEBypass+0x58>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800041c:	2b00      	cmp	r3, #0
 800041e:	bf0c      	ite	eq
 8000420:	2301      	moveq	r3, #1
 8000422:	2300      	movne	r3, #0
 8000424:	b2db      	uxtb	r3, r3
 8000426:	e7ff      	b.n	8000428 <RCC_HSEBypass+0x4c>
	}
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40023800 	.word	0x40023800

08000438 <RCC_setCLockStatus>:


bool RCC_setCLockStatus(const ClockType a_clockType, const ClockStatus a_status)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	460a      	mov	r2, r1
 8000442:	71fb      	strb	r3, [r7, #7]
 8000444:	4613      	mov	r3, r2
 8000446:	71bb      	strb	r3, [r7, #6]
	/* Check whether to turn the clock on or off */
	if(a_status == ON)
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d115      	bne.n	800047a <RCC_setCLockStatus+0x42>
	{
		/* Turn on desired clock by setting its ON bit in the RCC_CR */
		SET_BIT(RCC_CR, a_clockType);
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <RCC_setCLockStatus+0x6c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	79fa      	ldrb	r2, [r7, #7]
 8000454:	2101      	movs	r1, #1
 8000456:	fa01 f202 	lsl.w	r2, r1, r2
 800045a:	4611      	mov	r1, r2
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <RCC_setCLockStatus+0x6c>)
 800045e:	430b      	orrs	r3, r1
 8000460:	6013      	str	r3, [r2, #0]
		 * is ready.
		 *
		 * Note that the relation between the ready flag and the ON bit
		 * of each clock is (ready flag = ON bit + 1)
		 */
		while(BIT_IS_CLEAR(RCC_CR, (a_clockType + 1)));
 8000462:	bf00      	nop
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <RCC_setCLockStatus+0x6c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	79fa      	ldrb	r2, [r7, #7]
 800046a:	3201      	adds	r2, #1
 800046c:	2101      	movs	r1, #1
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	4013      	ands	r3, r2
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f5      	beq.n	8000464 <RCC_setCLockStatus+0x2c>
 8000478:	e00d      	b.n	8000496 <RCC_setCLockStatus+0x5e>
	}
	else if(a_status == OFF)
 800047a:	79bb      	ldrb	r3, [r7, #6]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d10a      	bne.n	8000496 <RCC_setCLockStatus+0x5e>
	{
		/* Turn off desired clock by clearing its ON bit in the RCC_CR */
		CLEAR_BIT(RCC_CR, a_clockType);
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <RCC_setCLockStatus+0x6c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	79fa      	ldrb	r2, [r7, #7]
 8000486:	2101      	movs	r1, #1
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	43d2      	mvns	r2, r2
 800048e:	4611      	mov	r1, r2
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <RCC_setCLockStatus+0x6c>)
 8000492:	400b      	ands	r3, r1
 8000494:	6013      	str	r3, [r2, #0]
	}
	return TRUE;
 8000496:	2301      	movs	r3, #1
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40023800 	.word	0x40023800

080004a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <ITM_SendChar+0x44>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <ITM_SendChar+0x44>)
 80004b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <ITM_SendChar+0x48>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <ITM_SendChar+0x48>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ca:	bf00      	nop
 80004cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f8      	beq.n	80004cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	e000edfc 	.word	0xe000edfc
 80004f0:	e0000e00 	.word	0xe0000e00

080004f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e00a      	b.n	800051c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000506:	f3af 8000 	nop.w
 800050a:	4601      	mov	r1, r0
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	b2ca      	uxtb	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	3301      	adds	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	dbf0      	blt.n	8000506 <_read+0x12>
	}

return len;
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	60f8      	str	r0, [r7, #12]
 8000536:	60b9      	str	r1, [r7, #8]
 8000538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	e009      	b.n	8000554 <_write+0x26>
	{
		/* Write into the ITM buffer */
		ITM_SendChar(*ptr++);
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	1c5a      	adds	r2, r3, #1
 8000544:	60ba      	str	r2, [r7, #8]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffad 	bl	80004a8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbf1      	blt.n	8000540 <_write+0x12>
	}
	return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <_close>:

int _close(int file)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
	return -1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800058c:	605a      	str	r2, [r3, #4]
	return 0;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <_isatty>:

int _isatty(int file)
{
 800059a:	b480      	push	{r7}
 800059c:	b083      	sub	sp, #12
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	return 1;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
	return 0;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <_sbrk+0x5c>)
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <_sbrk+0x60>)
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <_sbrk+0x64>)
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <_sbrk+0x68>)
 80005e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d207      	bcs.n	8000608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f8:	f000 f846 	bl	8000688 <__errno>
 80005fc:	4602      	mov	r2, r0
 80005fe:	230c      	movs	r3, #12
 8000600:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e009      	b.n	800061c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <_sbrk+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <_sbrk+0x64>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <_sbrk+0x64>)
 8000618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20020000 	.word	0x20020000
 8000628:	00000400 	.word	0x00000400
 800062c:	20000080 	.word	0x20000080
 8000630:	20000090 	.word	0x20000090

08000634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000638:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000662:	f000 f817 	bl	8000694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fdcd 	bl	8000204 <main>

0800066a <LoopForever>:

LoopForever:
    b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000678:	08001200 	.word	0x08001200
  ldr r2, =_sbss
 800067c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000680:	20000090 	.word	0x20000090

08000684 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC_IRQHandler>
	...

08000688 <__errno>:
 8000688:	4b01      	ldr	r3, [pc, #4]	; (8000690 <__errno+0x8>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000

08000694 <__libc_init_array>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	4e0d      	ldr	r6, [pc, #52]	; (80006cc <__libc_init_array+0x38>)
 8000698:	4c0d      	ldr	r4, [pc, #52]	; (80006d0 <__libc_init_array+0x3c>)
 800069a:	1ba4      	subs	r4, r4, r6
 800069c:	10a4      	asrs	r4, r4, #2
 800069e:	2500      	movs	r5, #0
 80006a0:	42a5      	cmp	r5, r4
 80006a2:	d109      	bne.n	80006b8 <__libc_init_array+0x24>
 80006a4:	4e0b      	ldr	r6, [pc, #44]	; (80006d4 <__libc_init_array+0x40>)
 80006a6:	4c0c      	ldr	r4, [pc, #48]	; (80006d8 <__libc_init_array+0x44>)
 80006a8:	f000 fc88 	bl	8000fbc <_init>
 80006ac:	1ba4      	subs	r4, r4, r6
 80006ae:	10a4      	asrs	r4, r4, #2
 80006b0:	2500      	movs	r5, #0
 80006b2:	42a5      	cmp	r5, r4
 80006b4:	d105      	bne.n	80006c2 <__libc_init_array+0x2e>
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006bc:	4798      	blx	r3
 80006be:	3501      	adds	r5, #1
 80006c0:	e7ee      	b.n	80006a0 <__libc_init_array+0xc>
 80006c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006c6:	4798      	blx	r3
 80006c8:	3501      	adds	r5, #1
 80006ca:	e7f2      	b.n	80006b2 <__libc_init_array+0x1e>
 80006cc:	080011f8 	.word	0x080011f8
 80006d0:	080011f8 	.word	0x080011f8
 80006d4:	080011f8 	.word	0x080011f8
 80006d8:	080011fc 	.word	0x080011fc

080006dc <memset>:
 80006dc:	4402      	add	r2, r0
 80006de:	4603      	mov	r3, r0
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d100      	bne.n	80006e6 <memset+0xa>
 80006e4:	4770      	bx	lr
 80006e6:	f803 1b01 	strb.w	r1, [r3], #1
 80006ea:	e7f9      	b.n	80006e0 <memset+0x4>

080006ec <_puts_r>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	460e      	mov	r6, r1
 80006f0:	4605      	mov	r5, r0
 80006f2:	b118      	cbz	r0, 80006fc <_puts_r+0x10>
 80006f4:	6983      	ldr	r3, [r0, #24]
 80006f6:	b90b      	cbnz	r3, 80006fc <_puts_r+0x10>
 80006f8:	f000 fa0c 	bl	8000b14 <__sinit>
 80006fc:	69ab      	ldr	r3, [r5, #24]
 80006fe:	68ac      	ldr	r4, [r5, #8]
 8000700:	b913      	cbnz	r3, 8000708 <_puts_r+0x1c>
 8000702:	4628      	mov	r0, r5
 8000704:	f000 fa06 	bl	8000b14 <__sinit>
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <_puts_r+0xac>)
 800070a:	429c      	cmp	r4, r3
 800070c:	d117      	bne.n	800073e <_puts_r+0x52>
 800070e:	686c      	ldr	r4, [r5, #4]
 8000710:	89a3      	ldrh	r3, [r4, #12]
 8000712:	071b      	lsls	r3, r3, #28
 8000714:	d51d      	bpl.n	8000752 <_puts_r+0x66>
 8000716:	6923      	ldr	r3, [r4, #16]
 8000718:	b1db      	cbz	r3, 8000752 <_puts_r+0x66>
 800071a:	3e01      	subs	r6, #1
 800071c:	68a3      	ldr	r3, [r4, #8]
 800071e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000722:	3b01      	subs	r3, #1
 8000724:	60a3      	str	r3, [r4, #8]
 8000726:	b9e9      	cbnz	r1, 8000764 <_puts_r+0x78>
 8000728:	2b00      	cmp	r3, #0
 800072a:	da2e      	bge.n	800078a <_puts_r+0x9e>
 800072c:	4622      	mov	r2, r4
 800072e:	210a      	movs	r1, #10
 8000730:	4628      	mov	r0, r5
 8000732:	f000 f83f 	bl	80007b4 <__swbuf_r>
 8000736:	3001      	adds	r0, #1
 8000738:	d011      	beq.n	800075e <_puts_r+0x72>
 800073a:	200a      	movs	r0, #10
 800073c:	e011      	b.n	8000762 <_puts_r+0x76>
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <_puts_r+0xb0>)
 8000740:	429c      	cmp	r4, r3
 8000742:	d101      	bne.n	8000748 <_puts_r+0x5c>
 8000744:	68ac      	ldr	r4, [r5, #8]
 8000746:	e7e3      	b.n	8000710 <_puts_r+0x24>
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <_puts_r+0xb4>)
 800074a:	429c      	cmp	r4, r3
 800074c:	bf08      	it	eq
 800074e:	68ec      	ldreq	r4, [r5, #12]
 8000750:	e7de      	b.n	8000710 <_puts_r+0x24>
 8000752:	4621      	mov	r1, r4
 8000754:	4628      	mov	r0, r5
 8000756:	f000 f87f 	bl	8000858 <__swsetup_r>
 800075a:	2800      	cmp	r0, #0
 800075c:	d0dd      	beq.n	800071a <_puts_r+0x2e>
 800075e:	f04f 30ff 	mov.w	r0, #4294967295
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	2b00      	cmp	r3, #0
 8000766:	da04      	bge.n	8000772 <_puts_r+0x86>
 8000768:	69a2      	ldr	r2, [r4, #24]
 800076a:	429a      	cmp	r2, r3
 800076c:	dc06      	bgt.n	800077c <_puts_r+0x90>
 800076e:	290a      	cmp	r1, #10
 8000770:	d004      	beq.n	800077c <_puts_r+0x90>
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	6022      	str	r2, [r4, #0]
 8000778:	7019      	strb	r1, [r3, #0]
 800077a:	e7cf      	b.n	800071c <_puts_r+0x30>
 800077c:	4622      	mov	r2, r4
 800077e:	4628      	mov	r0, r5
 8000780:	f000 f818 	bl	80007b4 <__swbuf_r>
 8000784:	3001      	adds	r0, #1
 8000786:	d1c9      	bne.n	800071c <_puts_r+0x30>
 8000788:	e7e9      	b.n	800075e <_puts_r+0x72>
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	200a      	movs	r0, #10
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	6022      	str	r2, [r4, #0]
 8000792:	7018      	strb	r0, [r3, #0]
 8000794:	e7e5      	b.n	8000762 <_puts_r+0x76>
 8000796:	bf00      	nop
 8000798:	080011b8 	.word	0x080011b8
 800079c:	080011d8 	.word	0x080011d8
 80007a0:	08001198 	.word	0x08001198

080007a4 <puts>:
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <puts+0xc>)
 80007a6:	4601      	mov	r1, r0
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	f7ff bf9f 	b.w	80006ec <_puts_r>
 80007ae:	bf00      	nop
 80007b0:	20000000 	.word	0x20000000

080007b4 <__swbuf_r>:
 80007b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b6:	460e      	mov	r6, r1
 80007b8:	4614      	mov	r4, r2
 80007ba:	4605      	mov	r5, r0
 80007bc:	b118      	cbz	r0, 80007c6 <__swbuf_r+0x12>
 80007be:	6983      	ldr	r3, [r0, #24]
 80007c0:	b90b      	cbnz	r3, 80007c6 <__swbuf_r+0x12>
 80007c2:	f000 f9a7 	bl	8000b14 <__sinit>
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <__swbuf_r+0x98>)
 80007c8:	429c      	cmp	r4, r3
 80007ca:	d12a      	bne.n	8000822 <__swbuf_r+0x6e>
 80007cc:	686c      	ldr	r4, [r5, #4]
 80007ce:	69a3      	ldr	r3, [r4, #24]
 80007d0:	60a3      	str	r3, [r4, #8]
 80007d2:	89a3      	ldrh	r3, [r4, #12]
 80007d4:	071a      	lsls	r2, r3, #28
 80007d6:	d52e      	bpl.n	8000836 <__swbuf_r+0x82>
 80007d8:	6923      	ldr	r3, [r4, #16]
 80007da:	b363      	cbz	r3, 8000836 <__swbuf_r+0x82>
 80007dc:	6923      	ldr	r3, [r4, #16]
 80007de:	6820      	ldr	r0, [r4, #0]
 80007e0:	1ac0      	subs	r0, r0, r3
 80007e2:	6963      	ldr	r3, [r4, #20]
 80007e4:	b2f6      	uxtb	r6, r6
 80007e6:	4283      	cmp	r3, r0
 80007e8:	4637      	mov	r7, r6
 80007ea:	dc04      	bgt.n	80007f6 <__swbuf_r+0x42>
 80007ec:	4621      	mov	r1, r4
 80007ee:	4628      	mov	r0, r5
 80007f0:	f000 f926 	bl	8000a40 <_fflush_r>
 80007f4:	bb28      	cbnz	r0, 8000842 <__swbuf_r+0x8e>
 80007f6:	68a3      	ldr	r3, [r4, #8]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	60a3      	str	r3, [r4, #8]
 80007fc:	6823      	ldr	r3, [r4, #0]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	6022      	str	r2, [r4, #0]
 8000802:	701e      	strb	r6, [r3, #0]
 8000804:	6963      	ldr	r3, [r4, #20]
 8000806:	3001      	adds	r0, #1
 8000808:	4283      	cmp	r3, r0
 800080a:	d004      	beq.n	8000816 <__swbuf_r+0x62>
 800080c:	89a3      	ldrh	r3, [r4, #12]
 800080e:	07db      	lsls	r3, r3, #31
 8000810:	d519      	bpl.n	8000846 <__swbuf_r+0x92>
 8000812:	2e0a      	cmp	r6, #10
 8000814:	d117      	bne.n	8000846 <__swbuf_r+0x92>
 8000816:	4621      	mov	r1, r4
 8000818:	4628      	mov	r0, r5
 800081a:	f000 f911 	bl	8000a40 <_fflush_r>
 800081e:	b190      	cbz	r0, 8000846 <__swbuf_r+0x92>
 8000820:	e00f      	b.n	8000842 <__swbuf_r+0x8e>
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <__swbuf_r+0x9c>)
 8000824:	429c      	cmp	r4, r3
 8000826:	d101      	bne.n	800082c <__swbuf_r+0x78>
 8000828:	68ac      	ldr	r4, [r5, #8]
 800082a:	e7d0      	b.n	80007ce <__swbuf_r+0x1a>
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <__swbuf_r+0xa0>)
 800082e:	429c      	cmp	r4, r3
 8000830:	bf08      	it	eq
 8000832:	68ec      	ldreq	r4, [r5, #12]
 8000834:	e7cb      	b.n	80007ce <__swbuf_r+0x1a>
 8000836:	4621      	mov	r1, r4
 8000838:	4628      	mov	r0, r5
 800083a:	f000 f80d 	bl	8000858 <__swsetup_r>
 800083e:	2800      	cmp	r0, #0
 8000840:	d0cc      	beq.n	80007dc <__swbuf_r+0x28>
 8000842:	f04f 37ff 	mov.w	r7, #4294967295
 8000846:	4638      	mov	r0, r7
 8000848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800084a:	bf00      	nop
 800084c:	080011b8 	.word	0x080011b8
 8000850:	080011d8 	.word	0x080011d8
 8000854:	08001198 	.word	0x08001198

08000858 <__swsetup_r>:
 8000858:	4b32      	ldr	r3, [pc, #200]	; (8000924 <__swsetup_r+0xcc>)
 800085a:	b570      	push	{r4, r5, r6, lr}
 800085c:	681d      	ldr	r5, [r3, #0]
 800085e:	4606      	mov	r6, r0
 8000860:	460c      	mov	r4, r1
 8000862:	b125      	cbz	r5, 800086e <__swsetup_r+0x16>
 8000864:	69ab      	ldr	r3, [r5, #24]
 8000866:	b913      	cbnz	r3, 800086e <__swsetup_r+0x16>
 8000868:	4628      	mov	r0, r5
 800086a:	f000 f953 	bl	8000b14 <__sinit>
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <__swsetup_r+0xd0>)
 8000870:	429c      	cmp	r4, r3
 8000872:	d10f      	bne.n	8000894 <__swsetup_r+0x3c>
 8000874:	686c      	ldr	r4, [r5, #4]
 8000876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800087a:	b29a      	uxth	r2, r3
 800087c:	0715      	lsls	r5, r2, #28
 800087e:	d42c      	bmi.n	80008da <__swsetup_r+0x82>
 8000880:	06d0      	lsls	r0, r2, #27
 8000882:	d411      	bmi.n	80008a8 <__swsetup_r+0x50>
 8000884:	2209      	movs	r2, #9
 8000886:	6032      	str	r2, [r6, #0]
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	81a3      	strh	r3, [r4, #12]
 800088e:	f04f 30ff 	mov.w	r0, #4294967295
 8000892:	e03e      	b.n	8000912 <__swsetup_r+0xba>
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <__swsetup_r+0xd4>)
 8000896:	429c      	cmp	r4, r3
 8000898:	d101      	bne.n	800089e <__swsetup_r+0x46>
 800089a:	68ac      	ldr	r4, [r5, #8]
 800089c:	e7eb      	b.n	8000876 <__swsetup_r+0x1e>
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <__swsetup_r+0xd8>)
 80008a0:	429c      	cmp	r4, r3
 80008a2:	bf08      	it	eq
 80008a4:	68ec      	ldreq	r4, [r5, #12]
 80008a6:	e7e6      	b.n	8000876 <__swsetup_r+0x1e>
 80008a8:	0751      	lsls	r1, r2, #29
 80008aa:	d512      	bpl.n	80008d2 <__swsetup_r+0x7a>
 80008ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008ae:	b141      	cbz	r1, 80008c2 <__swsetup_r+0x6a>
 80008b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008b4:	4299      	cmp	r1, r3
 80008b6:	d002      	beq.n	80008be <__swsetup_r+0x66>
 80008b8:	4630      	mov	r0, r6
 80008ba:	f000 fa19 	bl	8000cf0 <_free_r>
 80008be:	2300      	movs	r3, #0
 80008c0:	6363      	str	r3, [r4, #52]	; 0x34
 80008c2:	89a3      	ldrh	r3, [r4, #12]
 80008c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008c8:	81a3      	strh	r3, [r4, #12]
 80008ca:	2300      	movs	r3, #0
 80008cc:	6063      	str	r3, [r4, #4]
 80008ce:	6923      	ldr	r3, [r4, #16]
 80008d0:	6023      	str	r3, [r4, #0]
 80008d2:	89a3      	ldrh	r3, [r4, #12]
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	81a3      	strh	r3, [r4, #12]
 80008da:	6923      	ldr	r3, [r4, #16]
 80008dc:	b94b      	cbnz	r3, 80008f2 <__swsetup_r+0x9a>
 80008de:	89a3      	ldrh	r3, [r4, #12]
 80008e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e8:	d003      	beq.n	80008f2 <__swsetup_r+0x9a>
 80008ea:	4621      	mov	r1, r4
 80008ec:	4630      	mov	r0, r6
 80008ee:	f000 f9bf 	bl	8000c70 <__smakebuf_r>
 80008f2:	89a2      	ldrh	r2, [r4, #12]
 80008f4:	f012 0301 	ands.w	r3, r2, #1
 80008f8:	d00c      	beq.n	8000914 <__swsetup_r+0xbc>
 80008fa:	2300      	movs	r3, #0
 80008fc:	60a3      	str	r3, [r4, #8]
 80008fe:	6963      	ldr	r3, [r4, #20]
 8000900:	425b      	negs	r3, r3
 8000902:	61a3      	str	r3, [r4, #24]
 8000904:	6923      	ldr	r3, [r4, #16]
 8000906:	b953      	cbnz	r3, 800091e <__swsetup_r+0xc6>
 8000908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800090c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000910:	d1ba      	bne.n	8000888 <__swsetup_r+0x30>
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	0792      	lsls	r2, r2, #30
 8000916:	bf58      	it	pl
 8000918:	6963      	ldrpl	r3, [r4, #20]
 800091a:	60a3      	str	r3, [r4, #8]
 800091c:	e7f2      	b.n	8000904 <__swsetup_r+0xac>
 800091e:	2000      	movs	r0, #0
 8000920:	e7f7      	b.n	8000912 <__swsetup_r+0xba>
 8000922:	bf00      	nop
 8000924:	20000000 	.word	0x20000000
 8000928:	080011b8 	.word	0x080011b8
 800092c:	080011d8 	.word	0x080011d8
 8000930:	08001198 	.word	0x08001198

08000934 <__sflush_r>:
 8000934:	898a      	ldrh	r2, [r1, #12]
 8000936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800093a:	4605      	mov	r5, r0
 800093c:	0710      	lsls	r0, r2, #28
 800093e:	460c      	mov	r4, r1
 8000940:	d458      	bmi.n	80009f4 <__sflush_r+0xc0>
 8000942:	684b      	ldr	r3, [r1, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	dc05      	bgt.n	8000954 <__sflush_r+0x20>
 8000948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800094a:	2b00      	cmp	r3, #0
 800094c:	dc02      	bgt.n	8000954 <__sflush_r+0x20>
 800094e:	2000      	movs	r0, #0
 8000950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000956:	2e00      	cmp	r6, #0
 8000958:	d0f9      	beq.n	800094e <__sflush_r+0x1a>
 800095a:	2300      	movs	r3, #0
 800095c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000960:	682f      	ldr	r7, [r5, #0]
 8000962:	6a21      	ldr	r1, [r4, #32]
 8000964:	602b      	str	r3, [r5, #0]
 8000966:	d032      	beq.n	80009ce <__sflush_r+0x9a>
 8000968:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800096a:	89a3      	ldrh	r3, [r4, #12]
 800096c:	075a      	lsls	r2, r3, #29
 800096e:	d505      	bpl.n	800097c <__sflush_r+0x48>
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	1ac0      	subs	r0, r0, r3
 8000974:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000976:	b10b      	cbz	r3, 800097c <__sflush_r+0x48>
 8000978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800097a:	1ac0      	subs	r0, r0, r3
 800097c:	2300      	movs	r3, #0
 800097e:	4602      	mov	r2, r0
 8000980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000982:	6a21      	ldr	r1, [r4, #32]
 8000984:	4628      	mov	r0, r5
 8000986:	47b0      	blx	r6
 8000988:	1c43      	adds	r3, r0, #1
 800098a:	89a3      	ldrh	r3, [r4, #12]
 800098c:	d106      	bne.n	800099c <__sflush_r+0x68>
 800098e:	6829      	ldr	r1, [r5, #0]
 8000990:	291d      	cmp	r1, #29
 8000992:	d848      	bhi.n	8000a26 <__sflush_r+0xf2>
 8000994:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <__sflush_r+0x108>)
 8000996:	40ca      	lsrs	r2, r1
 8000998:	07d6      	lsls	r6, r2, #31
 800099a:	d544      	bpl.n	8000a26 <__sflush_r+0xf2>
 800099c:	2200      	movs	r2, #0
 800099e:	6062      	str	r2, [r4, #4]
 80009a0:	04d9      	lsls	r1, r3, #19
 80009a2:	6922      	ldr	r2, [r4, #16]
 80009a4:	6022      	str	r2, [r4, #0]
 80009a6:	d504      	bpl.n	80009b2 <__sflush_r+0x7e>
 80009a8:	1c42      	adds	r2, r0, #1
 80009aa:	d101      	bne.n	80009b0 <__sflush_r+0x7c>
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	b903      	cbnz	r3, 80009b2 <__sflush_r+0x7e>
 80009b0:	6560      	str	r0, [r4, #84]	; 0x54
 80009b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009b4:	602f      	str	r7, [r5, #0]
 80009b6:	2900      	cmp	r1, #0
 80009b8:	d0c9      	beq.n	800094e <__sflush_r+0x1a>
 80009ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009be:	4299      	cmp	r1, r3
 80009c0:	d002      	beq.n	80009c8 <__sflush_r+0x94>
 80009c2:	4628      	mov	r0, r5
 80009c4:	f000 f994 	bl	8000cf0 <_free_r>
 80009c8:	2000      	movs	r0, #0
 80009ca:	6360      	str	r0, [r4, #52]	; 0x34
 80009cc:	e7c0      	b.n	8000950 <__sflush_r+0x1c>
 80009ce:	2301      	movs	r3, #1
 80009d0:	4628      	mov	r0, r5
 80009d2:	47b0      	blx	r6
 80009d4:	1c41      	adds	r1, r0, #1
 80009d6:	d1c8      	bne.n	800096a <__sflush_r+0x36>
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0c5      	beq.n	800096a <__sflush_r+0x36>
 80009de:	2b1d      	cmp	r3, #29
 80009e0:	d001      	beq.n	80009e6 <__sflush_r+0xb2>
 80009e2:	2b16      	cmp	r3, #22
 80009e4:	d101      	bne.n	80009ea <__sflush_r+0xb6>
 80009e6:	602f      	str	r7, [r5, #0]
 80009e8:	e7b1      	b.n	800094e <__sflush_r+0x1a>
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	81a3      	strh	r3, [r4, #12]
 80009f2:	e7ad      	b.n	8000950 <__sflush_r+0x1c>
 80009f4:	690f      	ldr	r7, [r1, #16]
 80009f6:	2f00      	cmp	r7, #0
 80009f8:	d0a9      	beq.n	800094e <__sflush_r+0x1a>
 80009fa:	0793      	lsls	r3, r2, #30
 80009fc:	680e      	ldr	r6, [r1, #0]
 80009fe:	bf08      	it	eq
 8000a00:	694b      	ldreq	r3, [r1, #20]
 8000a02:	600f      	str	r7, [r1, #0]
 8000a04:	bf18      	it	ne
 8000a06:	2300      	movne	r3, #0
 8000a08:	eba6 0807 	sub.w	r8, r6, r7
 8000a0c:	608b      	str	r3, [r1, #8]
 8000a0e:	f1b8 0f00 	cmp.w	r8, #0
 8000a12:	dd9c      	ble.n	800094e <__sflush_r+0x1a>
 8000a14:	4643      	mov	r3, r8
 8000a16:	463a      	mov	r2, r7
 8000a18:	6a21      	ldr	r1, [r4, #32]
 8000a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	47b0      	blx	r6
 8000a20:	2800      	cmp	r0, #0
 8000a22:	dc06      	bgt.n	8000a32 <__sflush_r+0xfe>
 8000a24:	89a3      	ldrh	r3, [r4, #12]
 8000a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2a:	81a3      	strh	r3, [r4, #12]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	e78e      	b.n	8000950 <__sflush_r+0x1c>
 8000a32:	4407      	add	r7, r0
 8000a34:	eba8 0800 	sub.w	r8, r8, r0
 8000a38:	e7e9      	b.n	8000a0e <__sflush_r+0xda>
 8000a3a:	bf00      	nop
 8000a3c:	20400001 	.word	0x20400001

08000a40 <_fflush_r>:
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	690b      	ldr	r3, [r1, #16]
 8000a44:	4605      	mov	r5, r0
 8000a46:	460c      	mov	r4, r1
 8000a48:	b1db      	cbz	r3, 8000a82 <_fflush_r+0x42>
 8000a4a:	b118      	cbz	r0, 8000a54 <_fflush_r+0x14>
 8000a4c:	6983      	ldr	r3, [r0, #24]
 8000a4e:	b90b      	cbnz	r3, 8000a54 <_fflush_r+0x14>
 8000a50:	f000 f860 	bl	8000b14 <__sinit>
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <_fflush_r+0x48>)
 8000a56:	429c      	cmp	r4, r3
 8000a58:	d109      	bne.n	8000a6e <_fflush_r+0x2e>
 8000a5a:	686c      	ldr	r4, [r5, #4]
 8000a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a60:	b17b      	cbz	r3, 8000a82 <_fflush_r+0x42>
 8000a62:	4621      	mov	r1, r4
 8000a64:	4628      	mov	r0, r5
 8000a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a6a:	f7ff bf63 	b.w	8000934 <__sflush_r>
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <_fflush_r+0x4c>)
 8000a70:	429c      	cmp	r4, r3
 8000a72:	d101      	bne.n	8000a78 <_fflush_r+0x38>
 8000a74:	68ac      	ldr	r4, [r5, #8]
 8000a76:	e7f1      	b.n	8000a5c <_fflush_r+0x1c>
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <_fflush_r+0x50>)
 8000a7a:	429c      	cmp	r4, r3
 8000a7c:	bf08      	it	eq
 8000a7e:	68ec      	ldreq	r4, [r5, #12]
 8000a80:	e7ec      	b.n	8000a5c <_fflush_r+0x1c>
 8000a82:	2000      	movs	r0, #0
 8000a84:	bd38      	pop	{r3, r4, r5, pc}
 8000a86:	bf00      	nop
 8000a88:	080011b8 	.word	0x080011b8
 8000a8c:	080011d8 	.word	0x080011d8
 8000a90:	08001198 	.word	0x08001198

08000a94 <std>:
 8000a94:	2300      	movs	r3, #0
 8000a96:	b510      	push	{r4, lr}
 8000a98:	4604      	mov	r4, r0
 8000a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8000a9e:	6083      	str	r3, [r0, #8]
 8000aa0:	8181      	strh	r1, [r0, #12]
 8000aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8000aa4:	81c2      	strh	r2, [r0, #14]
 8000aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000aaa:	6183      	str	r3, [r0, #24]
 8000aac:	4619      	mov	r1, r3
 8000aae:	2208      	movs	r2, #8
 8000ab0:	305c      	adds	r0, #92	; 0x5c
 8000ab2:	f7ff fe13 	bl	80006dc <memset>
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <std+0x38>)
 8000ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <std+0x3c>)
 8000abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <std+0x40>)
 8000ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <std+0x44>)
 8000ac4:	6224      	str	r4, [r4, #32]
 8000ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8000ac8:	bd10      	pop	{r4, pc}
 8000aca:	bf00      	nop
 8000acc:	08000e61 	.word	0x08000e61
 8000ad0:	08000e83 	.word	0x08000e83
 8000ad4:	08000ebb 	.word	0x08000ebb
 8000ad8:	08000edf 	.word	0x08000edf

08000adc <_cleanup_r>:
 8000adc:	4901      	ldr	r1, [pc, #4]	; (8000ae4 <_cleanup_r+0x8>)
 8000ade:	f000 b885 	b.w	8000bec <_fwalk_reent>
 8000ae2:	bf00      	nop
 8000ae4:	08000a41 	.word	0x08000a41

08000ae8 <__sfmoreglue>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	1e4a      	subs	r2, r1, #1
 8000aec:	2568      	movs	r5, #104	; 0x68
 8000aee:	4355      	muls	r5, r2
 8000af0:	460e      	mov	r6, r1
 8000af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000af6:	f000 f949 	bl	8000d8c <_malloc_r>
 8000afa:	4604      	mov	r4, r0
 8000afc:	b140      	cbz	r0, 8000b10 <__sfmoreglue+0x28>
 8000afe:	2100      	movs	r1, #0
 8000b00:	e9c0 1600 	strd	r1, r6, [r0]
 8000b04:	300c      	adds	r0, #12
 8000b06:	60a0      	str	r0, [r4, #8]
 8000b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b0c:	f7ff fde6 	bl	80006dc <memset>
 8000b10:	4620      	mov	r0, r4
 8000b12:	bd70      	pop	{r4, r5, r6, pc}

08000b14 <__sinit>:
 8000b14:	6983      	ldr	r3, [r0, #24]
 8000b16:	b510      	push	{r4, lr}
 8000b18:	4604      	mov	r4, r0
 8000b1a:	bb33      	cbnz	r3, 8000b6a <__sinit+0x56>
 8000b1c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000b20:	6503      	str	r3, [r0, #80]	; 0x50
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <__sinit+0x58>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <__sinit+0x5c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6282      	str	r2, [r0, #40]	; 0x28
 8000b2a:	4298      	cmp	r0, r3
 8000b2c:	bf04      	itt	eq
 8000b2e:	2301      	moveq	r3, #1
 8000b30:	6183      	streq	r3, [r0, #24]
 8000b32:	f000 f81f 	bl	8000b74 <__sfp>
 8000b36:	6060      	str	r0, [r4, #4]
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f000 f81b 	bl	8000b74 <__sfp>
 8000b3e:	60a0      	str	r0, [r4, #8]
 8000b40:	4620      	mov	r0, r4
 8000b42:	f000 f817 	bl	8000b74 <__sfp>
 8000b46:	2200      	movs	r2, #0
 8000b48:	60e0      	str	r0, [r4, #12]
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	6860      	ldr	r0, [r4, #4]
 8000b4e:	f7ff ffa1 	bl	8000a94 <std>
 8000b52:	2201      	movs	r2, #1
 8000b54:	2109      	movs	r1, #9
 8000b56:	68a0      	ldr	r0, [r4, #8]
 8000b58:	f7ff ff9c 	bl	8000a94 <std>
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	2112      	movs	r1, #18
 8000b60:	68e0      	ldr	r0, [r4, #12]
 8000b62:	f7ff ff97 	bl	8000a94 <std>
 8000b66:	2301      	movs	r3, #1
 8000b68:	61a3      	str	r3, [r4, #24]
 8000b6a:	bd10      	pop	{r4, pc}
 8000b6c:	08001194 	.word	0x08001194
 8000b70:	08000add 	.word	0x08000add

08000b74 <__sfp>:
 8000b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <__sfp+0x70>)
 8000b78:	681e      	ldr	r6, [r3, #0]
 8000b7a:	69b3      	ldr	r3, [r6, #24]
 8000b7c:	4607      	mov	r7, r0
 8000b7e:	b913      	cbnz	r3, 8000b86 <__sfp+0x12>
 8000b80:	4630      	mov	r0, r6
 8000b82:	f7ff ffc7 	bl	8000b14 <__sinit>
 8000b86:	3648      	adds	r6, #72	; 0x48
 8000b88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	d503      	bpl.n	8000b98 <__sfp+0x24>
 8000b90:	6833      	ldr	r3, [r6, #0]
 8000b92:	b133      	cbz	r3, 8000ba2 <__sfp+0x2e>
 8000b94:	6836      	ldr	r6, [r6, #0]
 8000b96:	e7f7      	b.n	8000b88 <__sfp+0x14>
 8000b98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b9c:	b16d      	cbz	r5, 8000bba <__sfp+0x46>
 8000b9e:	3468      	adds	r4, #104	; 0x68
 8000ba0:	e7f4      	b.n	8000b8c <__sfp+0x18>
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	4638      	mov	r0, r7
 8000ba6:	f7ff ff9f 	bl	8000ae8 <__sfmoreglue>
 8000baa:	6030      	str	r0, [r6, #0]
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d1f1      	bne.n	8000b94 <__sfp+0x20>
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <__sfp+0x74>)
 8000bbc:	6665      	str	r5, [r4, #100]	; 0x64
 8000bbe:	e9c4 5500 	strd	r5, r5, [r4]
 8000bc2:	60a5      	str	r5, [r4, #8]
 8000bc4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000bc8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000bcc:	2208      	movs	r2, #8
 8000bce:	4629      	mov	r1, r5
 8000bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bd4:	f7ff fd82 	bl	80006dc <memset>
 8000bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000be0:	e7e9      	b.n	8000bb6 <__sfp+0x42>
 8000be2:	bf00      	nop
 8000be4:	08001194 	.word	0x08001194
 8000be8:	ffff0001 	.word	0xffff0001

08000bec <_fwalk_reent>:
 8000bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf0:	4680      	mov	r8, r0
 8000bf2:	4689      	mov	r9, r1
 8000bf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	b914      	cbnz	r4, 8000c02 <_fwalk_reent+0x16>
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c02:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000c06:	3f01      	subs	r7, #1
 8000c08:	d501      	bpl.n	8000c0e <_fwalk_reent+0x22>
 8000c0a:	6824      	ldr	r4, [r4, #0]
 8000c0c:	e7f5      	b.n	8000bfa <_fwalk_reent+0xe>
 8000c0e:	89ab      	ldrh	r3, [r5, #12]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d907      	bls.n	8000c24 <_fwalk_reent+0x38>
 8000c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	d003      	beq.n	8000c24 <_fwalk_reent+0x38>
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	4640      	mov	r0, r8
 8000c20:	47c8      	blx	r9
 8000c22:	4306      	orrs	r6, r0
 8000c24:	3568      	adds	r5, #104	; 0x68
 8000c26:	e7ee      	b.n	8000c06 <_fwalk_reent+0x1a>

08000c28 <__swhatbuf_r>:
 8000c28:	b570      	push	{r4, r5, r6, lr}
 8000c2a:	460e      	mov	r6, r1
 8000c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c30:	2900      	cmp	r1, #0
 8000c32:	b096      	sub	sp, #88	; 0x58
 8000c34:	4614      	mov	r4, r2
 8000c36:	461d      	mov	r5, r3
 8000c38:	da07      	bge.n	8000c4a <__swhatbuf_r+0x22>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	602b      	str	r3, [r5, #0]
 8000c3e:	89b3      	ldrh	r3, [r6, #12]
 8000c40:	061a      	lsls	r2, r3, #24
 8000c42:	d410      	bmi.n	8000c66 <__swhatbuf_r+0x3e>
 8000c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c48:	e00e      	b.n	8000c68 <__swhatbuf_r+0x40>
 8000c4a:	466a      	mov	r2, sp
 8000c4c:	f000 f96e 	bl	8000f2c <_fstat_r>
 8000c50:	2800      	cmp	r0, #0
 8000c52:	dbf2      	blt.n	8000c3a <__swhatbuf_r+0x12>
 8000c54:	9a01      	ldr	r2, [sp, #4]
 8000c56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c5e:	425a      	negs	r2, r3
 8000c60:	415a      	adcs	r2, r3
 8000c62:	602a      	str	r2, [r5, #0]
 8000c64:	e7ee      	b.n	8000c44 <__swhatbuf_r+0x1c>
 8000c66:	2340      	movs	r3, #64	; 0x40
 8000c68:	2000      	movs	r0, #0
 8000c6a:	6023      	str	r3, [r4, #0]
 8000c6c:	b016      	add	sp, #88	; 0x58
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}

08000c70 <__smakebuf_r>:
 8000c70:	898b      	ldrh	r3, [r1, #12]
 8000c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c74:	079d      	lsls	r5, r3, #30
 8000c76:	4606      	mov	r6, r0
 8000c78:	460c      	mov	r4, r1
 8000c7a:	d507      	bpl.n	8000c8c <__smakebuf_r+0x1c>
 8000c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c80:	6023      	str	r3, [r4, #0]
 8000c82:	6123      	str	r3, [r4, #16]
 8000c84:	2301      	movs	r3, #1
 8000c86:	6163      	str	r3, [r4, #20]
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
 8000c8c:	ab01      	add	r3, sp, #4
 8000c8e:	466a      	mov	r2, sp
 8000c90:	f7ff ffca 	bl	8000c28 <__swhatbuf_r>
 8000c94:	9900      	ldr	r1, [sp, #0]
 8000c96:	4605      	mov	r5, r0
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f000 f877 	bl	8000d8c <_malloc_r>
 8000c9e:	b948      	cbnz	r0, 8000cb4 <__smakebuf_r+0x44>
 8000ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ca4:	059a      	lsls	r2, r3, #22
 8000ca6:	d4ef      	bmi.n	8000c88 <__smakebuf_r+0x18>
 8000ca8:	f023 0303 	bic.w	r3, r3, #3
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	81a3      	strh	r3, [r4, #12]
 8000cb2:	e7e3      	b.n	8000c7c <__smakebuf_r+0xc>
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <__smakebuf_r+0x7c>)
 8000cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cb8:	89a3      	ldrh	r3, [r4, #12]
 8000cba:	6020      	str	r0, [r4, #0]
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	81a3      	strh	r3, [r4, #12]
 8000cc2:	9b00      	ldr	r3, [sp, #0]
 8000cc4:	6163      	str	r3, [r4, #20]
 8000cc6:	9b01      	ldr	r3, [sp, #4]
 8000cc8:	6120      	str	r0, [r4, #16]
 8000cca:	b15b      	cbz	r3, 8000ce4 <__smakebuf_r+0x74>
 8000ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	f000 f93d 	bl	8000f50 <_isatty_r>
 8000cd6:	b128      	cbz	r0, 8000ce4 <__smakebuf_r+0x74>
 8000cd8:	89a3      	ldrh	r3, [r4, #12]
 8000cda:	f023 0303 	bic.w	r3, r3, #3
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	81a3      	strh	r3, [r4, #12]
 8000ce4:	89a3      	ldrh	r3, [r4, #12]
 8000ce6:	431d      	orrs	r5, r3
 8000ce8:	81a5      	strh	r5, [r4, #12]
 8000cea:	e7cd      	b.n	8000c88 <__smakebuf_r+0x18>
 8000cec:	08000add 	.word	0x08000add

08000cf0 <_free_r>:
 8000cf0:	b538      	push	{r3, r4, r5, lr}
 8000cf2:	4605      	mov	r5, r0
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	d045      	beq.n	8000d84 <_free_r+0x94>
 8000cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cfc:	1f0c      	subs	r4, r1, #4
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bfb8      	it	lt
 8000d02:	18e4      	addlt	r4, r4, r3
 8000d04:	f000 f946 	bl	8000f94 <__malloc_lock>
 8000d08:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <_free_r+0x98>)
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	b933      	cbnz	r3, 8000d1e <_free_r+0x2e>
 8000d10:	6063      	str	r3, [r4, #4]
 8000d12:	6014      	str	r4, [r2, #0]
 8000d14:	4628      	mov	r0, r5
 8000d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d1a:	f000 b93c 	b.w	8000f96 <__malloc_unlock>
 8000d1e:	42a3      	cmp	r3, r4
 8000d20:	d90c      	bls.n	8000d3c <_free_r+0x4c>
 8000d22:	6821      	ldr	r1, [r4, #0]
 8000d24:	1862      	adds	r2, r4, r1
 8000d26:	4293      	cmp	r3, r2
 8000d28:	bf04      	itt	eq
 8000d2a:	681a      	ldreq	r2, [r3, #0]
 8000d2c:	685b      	ldreq	r3, [r3, #4]
 8000d2e:	6063      	str	r3, [r4, #4]
 8000d30:	bf04      	itt	eq
 8000d32:	1852      	addeq	r2, r2, r1
 8000d34:	6022      	streq	r2, [r4, #0]
 8000d36:	6004      	str	r4, [r0, #0]
 8000d38:	e7ec      	b.n	8000d14 <_free_r+0x24>
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	b10a      	cbz	r2, 8000d44 <_free_r+0x54>
 8000d40:	42a2      	cmp	r2, r4
 8000d42:	d9fa      	bls.n	8000d3a <_free_r+0x4a>
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	1858      	adds	r0, r3, r1
 8000d48:	42a0      	cmp	r0, r4
 8000d4a:	d10b      	bne.n	8000d64 <_free_r+0x74>
 8000d4c:	6820      	ldr	r0, [r4, #0]
 8000d4e:	4401      	add	r1, r0
 8000d50:	1858      	adds	r0, r3, r1
 8000d52:	4282      	cmp	r2, r0
 8000d54:	6019      	str	r1, [r3, #0]
 8000d56:	d1dd      	bne.n	8000d14 <_free_r+0x24>
 8000d58:	6810      	ldr	r0, [r2, #0]
 8000d5a:	6852      	ldr	r2, [r2, #4]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	4401      	add	r1, r0
 8000d60:	6019      	str	r1, [r3, #0]
 8000d62:	e7d7      	b.n	8000d14 <_free_r+0x24>
 8000d64:	d902      	bls.n	8000d6c <_free_r+0x7c>
 8000d66:	230c      	movs	r3, #12
 8000d68:	602b      	str	r3, [r5, #0]
 8000d6a:	e7d3      	b.n	8000d14 <_free_r+0x24>
 8000d6c:	6820      	ldr	r0, [r4, #0]
 8000d6e:	1821      	adds	r1, r4, r0
 8000d70:	428a      	cmp	r2, r1
 8000d72:	bf04      	itt	eq
 8000d74:	6811      	ldreq	r1, [r2, #0]
 8000d76:	6852      	ldreq	r2, [r2, #4]
 8000d78:	6062      	str	r2, [r4, #4]
 8000d7a:	bf04      	itt	eq
 8000d7c:	1809      	addeq	r1, r1, r0
 8000d7e:	6021      	streq	r1, [r4, #0]
 8000d80:	605c      	str	r4, [r3, #4]
 8000d82:	e7c7      	b.n	8000d14 <_free_r+0x24>
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop
 8000d88:	20000084 	.word	0x20000084

08000d8c <_malloc_r>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	1ccd      	adds	r5, r1, #3
 8000d90:	f025 0503 	bic.w	r5, r5, #3
 8000d94:	3508      	adds	r5, #8
 8000d96:	2d0c      	cmp	r5, #12
 8000d98:	bf38      	it	cc
 8000d9a:	250c      	movcc	r5, #12
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	db01      	blt.n	8000da6 <_malloc_r+0x1a>
 8000da2:	42a9      	cmp	r1, r5
 8000da4:	d903      	bls.n	8000dae <_malloc_r+0x22>
 8000da6:	230c      	movs	r3, #12
 8000da8:	6033      	str	r3, [r6, #0]
 8000daa:	2000      	movs	r0, #0
 8000dac:	bd70      	pop	{r4, r5, r6, pc}
 8000dae:	f000 f8f1 	bl	8000f94 <__malloc_lock>
 8000db2:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <_malloc_r+0xac>)
 8000db4:	6814      	ldr	r4, [r2, #0]
 8000db6:	4621      	mov	r1, r4
 8000db8:	b991      	cbnz	r1, 8000de0 <_malloc_r+0x54>
 8000dba:	4c20      	ldr	r4, [pc, #128]	; (8000e3c <_malloc_r+0xb0>)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	b91b      	cbnz	r3, 8000dc8 <_malloc_r+0x3c>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	f000 f83d 	bl	8000e40 <_sbrk_r>
 8000dc6:	6020      	str	r0, [r4, #0]
 8000dc8:	4629      	mov	r1, r5
 8000dca:	4630      	mov	r0, r6
 8000dcc:	f000 f838 	bl	8000e40 <_sbrk_r>
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	d124      	bne.n	8000e1e <_malloc_r+0x92>
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	6033      	str	r3, [r6, #0]
 8000dd8:	4630      	mov	r0, r6
 8000dda:	f000 f8dc 	bl	8000f96 <__malloc_unlock>
 8000dde:	e7e4      	b.n	8000daa <_malloc_r+0x1e>
 8000de0:	680b      	ldr	r3, [r1, #0]
 8000de2:	1b5b      	subs	r3, r3, r5
 8000de4:	d418      	bmi.n	8000e18 <_malloc_r+0x8c>
 8000de6:	2b0b      	cmp	r3, #11
 8000de8:	d90f      	bls.n	8000e0a <_malloc_r+0x7e>
 8000dea:	600b      	str	r3, [r1, #0]
 8000dec:	50cd      	str	r5, [r1, r3]
 8000dee:	18cc      	adds	r4, r1, r3
 8000df0:	4630      	mov	r0, r6
 8000df2:	f000 f8d0 	bl	8000f96 <__malloc_unlock>
 8000df6:	f104 000b 	add.w	r0, r4, #11
 8000dfa:	1d23      	adds	r3, r4, #4
 8000dfc:	f020 0007 	bic.w	r0, r0, #7
 8000e00:	1ac3      	subs	r3, r0, r3
 8000e02:	d0d3      	beq.n	8000dac <_malloc_r+0x20>
 8000e04:	425a      	negs	r2, r3
 8000e06:	50e2      	str	r2, [r4, r3]
 8000e08:	e7d0      	b.n	8000dac <_malloc_r+0x20>
 8000e0a:	428c      	cmp	r4, r1
 8000e0c:	684b      	ldr	r3, [r1, #4]
 8000e0e:	bf16      	itet	ne
 8000e10:	6063      	strne	r3, [r4, #4]
 8000e12:	6013      	streq	r3, [r2, #0]
 8000e14:	460c      	movne	r4, r1
 8000e16:	e7eb      	b.n	8000df0 <_malloc_r+0x64>
 8000e18:	460c      	mov	r4, r1
 8000e1a:	6849      	ldr	r1, [r1, #4]
 8000e1c:	e7cc      	b.n	8000db8 <_malloc_r+0x2c>
 8000e1e:	1cc4      	adds	r4, r0, #3
 8000e20:	f024 0403 	bic.w	r4, r4, #3
 8000e24:	42a0      	cmp	r0, r4
 8000e26:	d005      	beq.n	8000e34 <_malloc_r+0xa8>
 8000e28:	1a21      	subs	r1, r4, r0
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	f000 f808 	bl	8000e40 <_sbrk_r>
 8000e30:	3001      	adds	r0, #1
 8000e32:	d0cf      	beq.n	8000dd4 <_malloc_r+0x48>
 8000e34:	6025      	str	r5, [r4, #0]
 8000e36:	e7db      	b.n	8000df0 <_malloc_r+0x64>
 8000e38:	20000084 	.word	0x20000084
 8000e3c:	20000088 	.word	0x20000088

08000e40 <_sbrk_r>:
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	4c06      	ldr	r4, [pc, #24]	; (8000e5c <_sbrk_r+0x1c>)
 8000e44:	2300      	movs	r3, #0
 8000e46:	4605      	mov	r5, r0
 8000e48:	4608      	mov	r0, r1
 8000e4a:	6023      	str	r3, [r4, #0]
 8000e4c:	f7ff fbbc 	bl	80005c8 <_sbrk>
 8000e50:	1c43      	adds	r3, r0, #1
 8000e52:	d102      	bne.n	8000e5a <_sbrk_r+0x1a>
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	b103      	cbz	r3, 8000e5a <_sbrk_r+0x1a>
 8000e58:	602b      	str	r3, [r5, #0]
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	2000008c 	.word	0x2000008c

08000e60 <__sread>:
 8000e60:	b510      	push	{r4, lr}
 8000e62:	460c      	mov	r4, r1
 8000e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e68:	f000 f896 	bl	8000f98 <_read_r>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	bfab      	itete	ge
 8000e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e72:	89a3      	ldrhlt	r3, [r4, #12]
 8000e74:	181b      	addge	r3, r3, r0
 8000e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e7a:	bfac      	ite	ge
 8000e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e7e:	81a3      	strhlt	r3, [r4, #12]
 8000e80:	bd10      	pop	{r4, pc}

08000e82 <__swrite>:
 8000e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e86:	461f      	mov	r7, r3
 8000e88:	898b      	ldrh	r3, [r1, #12]
 8000e8a:	05db      	lsls	r3, r3, #23
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	4616      	mov	r6, r2
 8000e92:	d505      	bpl.n	8000ea0 <__swrite+0x1e>
 8000e94:	2302      	movs	r3, #2
 8000e96:	2200      	movs	r2, #0
 8000e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e9c:	f000 f868 	bl	8000f70 <_lseek_r>
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eaa:	81a3      	strh	r3, [r4, #12]
 8000eac:	4632      	mov	r2, r6
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb6:	f000 b817 	b.w	8000ee8 <_write_r>

08000eba <__sseek>:
 8000eba:	b510      	push	{r4, lr}
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec2:	f000 f855 	bl	8000f70 <_lseek_r>
 8000ec6:	1c43      	adds	r3, r0, #1
 8000ec8:	89a3      	ldrh	r3, [r4, #12]
 8000eca:	bf15      	itete	ne
 8000ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ed6:	81a3      	strheq	r3, [r4, #12]
 8000ed8:	bf18      	it	ne
 8000eda:	81a3      	strhne	r3, [r4, #12]
 8000edc:	bd10      	pop	{r4, pc}

08000ede <__sclose>:
 8000ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee2:	f000 b813 	b.w	8000f0c <_close_r>
	...

08000ee8 <_write_r>:
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	4c07      	ldr	r4, [pc, #28]	; (8000f08 <_write_r+0x20>)
 8000eec:	4605      	mov	r5, r0
 8000eee:	4608      	mov	r0, r1
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	6022      	str	r2, [r4, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f7ff fb19 	bl	800052e <_write>
 8000efc:	1c43      	adds	r3, r0, #1
 8000efe:	d102      	bne.n	8000f06 <_write_r+0x1e>
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	b103      	cbz	r3, 8000f06 <_write_r+0x1e>
 8000f04:	602b      	str	r3, [r5, #0]
 8000f06:	bd38      	pop	{r3, r4, r5, pc}
 8000f08:	2000008c 	.word	0x2000008c

08000f0c <_close_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4c06      	ldr	r4, [pc, #24]	; (8000f28 <_close_r+0x1c>)
 8000f10:	2300      	movs	r3, #0
 8000f12:	4605      	mov	r5, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	f7ff fb25 	bl	8000566 <_close>
 8000f1c:	1c43      	adds	r3, r0, #1
 8000f1e:	d102      	bne.n	8000f26 <_close_r+0x1a>
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	b103      	cbz	r3, 8000f26 <_close_r+0x1a>
 8000f24:	602b      	str	r3, [r5, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
 8000f28:	2000008c 	.word	0x2000008c

08000f2c <_fstat_r>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4c07      	ldr	r4, [pc, #28]	; (8000f4c <_fstat_r+0x20>)
 8000f30:	2300      	movs	r3, #0
 8000f32:	4605      	mov	r5, r0
 8000f34:	4608      	mov	r0, r1
 8000f36:	4611      	mov	r1, r2
 8000f38:	6023      	str	r3, [r4, #0]
 8000f3a:	f7ff fb1f 	bl	800057c <_fstat>
 8000f3e:	1c43      	adds	r3, r0, #1
 8000f40:	d102      	bne.n	8000f48 <_fstat_r+0x1c>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	b103      	cbz	r3, 8000f48 <_fstat_r+0x1c>
 8000f46:	602b      	str	r3, [r5, #0]
 8000f48:	bd38      	pop	{r3, r4, r5, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000008c 	.word	0x2000008c

08000f50 <_isatty_r>:
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4c06      	ldr	r4, [pc, #24]	; (8000f6c <_isatty_r+0x1c>)
 8000f54:	2300      	movs	r3, #0
 8000f56:	4605      	mov	r5, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	6023      	str	r3, [r4, #0]
 8000f5c:	f7ff fb1d 	bl	800059a <_isatty>
 8000f60:	1c43      	adds	r3, r0, #1
 8000f62:	d102      	bne.n	8000f6a <_isatty_r+0x1a>
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	b103      	cbz	r3, 8000f6a <_isatty_r+0x1a>
 8000f68:	602b      	str	r3, [r5, #0]
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
 8000f6c:	2000008c 	.word	0x2000008c

08000f70 <_lseek_r>:
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	4c07      	ldr	r4, [pc, #28]	; (8000f90 <_lseek_r+0x20>)
 8000f74:	4605      	mov	r5, r0
 8000f76:	4608      	mov	r0, r1
 8000f78:	4611      	mov	r1, r2
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	6022      	str	r2, [r4, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f7ff fb15 	bl	80005ae <_lseek>
 8000f84:	1c43      	adds	r3, r0, #1
 8000f86:	d102      	bne.n	8000f8e <_lseek_r+0x1e>
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	b103      	cbz	r3, 8000f8e <_lseek_r+0x1e>
 8000f8c:	602b      	str	r3, [r5, #0]
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	2000008c 	.word	0x2000008c

08000f94 <__malloc_lock>:
 8000f94:	4770      	bx	lr

08000f96 <__malloc_unlock>:
 8000f96:	4770      	bx	lr

08000f98 <_read_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4c07      	ldr	r4, [pc, #28]	; (8000fb8 <_read_r+0x20>)
 8000f9c:	4605      	mov	r5, r0
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6022      	str	r2, [r4, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f7ff faa4 	bl	80004f4 <_read>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d102      	bne.n	8000fb6 <_read_r+0x1e>
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	b103      	cbz	r3, 8000fb6 <_read_r+0x1e>
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	2000008c 	.word	0x2000008c

08000fbc <_init>:
 8000fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fbe:	bf00      	nop
 8000fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc2:	bc08      	pop	{r3}
 8000fc4:	469e      	mov	lr, r3
 8000fc6:	4770      	bx	lr

08000fc8 <_fini>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	bf00      	nop
 8000fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fce:	bc08      	pop	{r3}
 8000fd0:	469e      	mov	lr, r3
 8000fd2:	4770      	bx	lr
